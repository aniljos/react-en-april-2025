React session: 7th April 2025

Pre-test: https://forms.office.com/r/2pvDgZ2yLz


Git Url: https://github.com/aniljos/react-en-april-2025
REST API Mock: https://github.com/aniljos/REST-API-Mock
crest-ui-library: https://github.com/aniljos/crest-ui-library

Babel cdn: https://cdnjs.com/libraries/babel-standalone/7.26.3

Introduction: https://forms.gle/cGk6U8shtY2owYw87

Cloud labs: https://forms.office.com/r/2pvDgZ2yLz

Quiz #1: https://forms.gle/BMdLfRy3jBDc4UTA9

Component props:
    - parameterize a Component
    - sends data from the parent to the child Component
    - in the child component, props is read-only

Re-render
    - props change
    - state changes

Component state
    - state update will re-render the component
    - state updates are asynchronous
    - state updates are batched
        - count: 5
        -  setCount(count + 1); => setCount(6)
        -  setCount(count + 1); => setCount(6)

        - setCount(currentCount => currentCount + 1);  => setCount(invoke the callback) => invoke the callback => 6
        - setCount(currentCount => currentCount + 1);  => setCount(invoke the callback) => invoke the callback => 7
    - setState - 2 signatures(overloads)
        - setState(updatedValue);
        - setState(callback) => function(currentState){ return Ã¼pdatedState}
    - state must be treated as immutable


Form controls(input)
    - controlled input
        - state(useState) is bound to the input field
        - reactive 
    - uncontrolled input
        - ref(useRef) to the input field- get/set updatedValue
        - non-reactive

Component useEffect
    - mount 
        - useEffect(setup, []);
        - api calls to be invoked once when the compoent is mounted
        - DOM initialization
        - regsiter events on the window or document objects
    - unmount
        - cancel the api call
        - unregister events(window, document)

Components Design
    - Keep the component granular
        - Modular, Easy maintain
        - Easy to optimize
        - Easy to test(Unit)
    - High Order Components(HOC)
        - Pattern to implement extensibility
        - Example: React.memo
    
Component optimize
    - React.memo
    - hooks
        - useCallback
        - useMemo

Share data across the application
    - Browsers
        - cookies
        - localStorage: persistant
        - sessionStorage: non-persistant
    - Memory of the Browser
        - Redux
        - React Context

Redux
    -store
        - all the data is stored
        - one per application
    - action: object
        - {type: "set_token", token: "abc"}
        - {type: "clear_token"}
    - reducer: function 
        - accepts the actions and update the state in the store
        - one per store
            - pattern : multiple reducres and combine to a single reducer
    - library
        - react-redux : to integrate redux with react
        - redux toolkit : opionated library with implemention of common patterns
    -react-redux    
        - Provider compoment: integrte the store to the react application
        - hooks
            - useDispatch: returns a dispatch function
            - useSelector: select(read) a state from store, subscribes
            - useStore: returns a handle to the store






Email: anil.jos@gmail.com

WA: 9833169784